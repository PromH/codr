name: Rust

on:
  # Triggers the workflow on push or pull request events.
  push:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
      - "[0-9]+.x"
  pull_request: {}
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}
  GH_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}
  CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_PUBLISH_KEY }}
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  RUST_BACKTRACE: 1

jobs:
  node-setup:
    runs-on: ${{ matrix.rust_os.os }}
    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
          # cache: npm
          # cache-dependency-path: "**/Cargo.toml"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install @semantic-release-cargo/semantic-release-cargo

  # Save next release version as GitHub Actions outputs
  get-next-version:
    needs: node-setup
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4
    permissions:
      contents: write

  # Setups up the rest of the jobs with tools
  setup:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: ${{ matrix.rust_os.rust }}
          override: true
          components: clippy, rustfmt

      - name: Build (to get dependencies)
        run: cargo build --verbose

      - name: Cache Rust toolchain
        uses: actions/cache/save@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ job.setup.steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

  # Checks to see if linting and formatting has been adhered to
  checks:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}
    needs:
      - setup

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Clippy
        if: ${{ matrix.rust_os.rust == '1.72.0' }}
        run: cargo clippy --all --all-features -- --deny warnings

      - name: Check fmt
        if: ${{ matrix.rust_os.rust == '1.72.0' }}
        run: cargo fmt --all -- --check

  # Tests the packages in the repo
  tests:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}
    needs:
      - setup

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Run tests
        run: cargo test --verbose

  # Compiles packages
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}
    needs:
      - setup
      - checks
      - tests

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Build
        run: cargo build --verbose

  # Compile native CLI binary
  build-cli:
    name: Build CLI ${{ matrix.build.target }}
    if: needs.get-next-version.outputs.new-release-published == 'true'
    runs-on: ${{ matrix.build.os }}
    needs:
      - get-next-version
    env:
      CARGO: cargo

    strategy:
      matrix:
        build:
          # alphabatized by target
          - os: macOS-latest
            target: aarch64-apple-darwin
            cross: true
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
            cross: true
          - os: macOS-latest
            target: x86_64-apple-darwin
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build inputs
        if: runner.os == 'Linux' && !matrix.build.cross
        run: sudo apt install musl-tools

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: stable
          target: ${{ matrix.build.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Prepare semantic-release for Rust
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Configure cross
        if: matrix.build.cross
        run: echo "CARGO=cross" >> "$GITHUB_ENV"

      - name: Compile release binary
        run: ${{ env.CARGO }} build --bin codr --release --target ${{ matrix.build.target }} --verbose

      - name: Create release archive
        run: |
          mkdir dist
          cp target/${{ matrix.build.target }}/release/codr dist/codr-${{ matrix.build.target }}

      - name: Create binary checksum
        run: shasum --algorithm 256 --binary codr-${{ matrix.build.target }} | tee codr-${{ matrix.build.target }}-SHA256SUM.txt
        working-directory: ./dist

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build.target }}
          path: |
            dist/codr-${{ matrix.build.target }}
            dist/codr-${{ matrix.build.target }}-SHA256SUM.txt
          if-no-files-found: error
          retention-days: 1

  # Dry run of semantic-release
  semantic-release-dry-run:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs:
      - get-next-version

    env:
      GITHUB_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}
      GH_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Prepare semantic-release for Rust
        if: needs.get-next-version.outputs.new-release-published == 'true'
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Semantic Release
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_PUBLISH_KEY }}
        uses: cycjimmy/semantic-release-action@v4
        with:
            extra_plugins: |
              @semantic-release-cargo/semantic-release-cargo
              @semantic-release/git
              @semantic-release/github
              @semantic-release/exec
            dry_run: true

  # --- Jobs that only on successful pushes to main ---
  semantic-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs:
      - get-next-version
      - semantic-release-dry-run
      - build-cli
    if: github.ref == 'refs/heads/main'

    env:
      GITHUB_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}
      GH_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}
      ACTIONS_RUNNER_DEBUG: true

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: ls artifacts
        run: ls -R ./artifacts

      - name: Prepare GitHub Release artifacts
        run: |
          mkdir dist/
          mv artifacts/aarch64-apple-darwin dist/
          echo artifacts/aarch64-unknown-linux-gnu dist/
          mv artifacts/aarch64-unknown-linux-musl dist/
          mv artifacts/i686-unknown-linux-gnu dist/
          mv artifacts/i686-unknown-linux-musl dist/
          mv artifacts/x86_64-apple-darwin dist/
          mv artifacts/x86_64-unknown-linux-gnu dist/
          mv artifacts/x86_64-unknown-linux-musl dist/

      - name: Combine checksums
        run: cat dist/**/codr-*-SHA256SUM.txt | tee dist/SHA256SUMS.txt

      - name: Prepare semantic-release for Rust
        if: needs.get-next-version.outputs.new-release-published == 'true'
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}
        with:
            extra_plugins: |
              @semantic-release-cargo/semantic-release-cargo
              @semantic-release/git
              @semantic-release/github
              @semantic-release/exec

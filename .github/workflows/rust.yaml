name: Rust

on:
  # Triggers the workflow on push or pull request events.
  push:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
      - "[0-9]+.x"
  pull_request: {}
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.CODR_WORKFLOW_TOKEN }}
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"

jobs:
  # Save next release version as GitHub Actions outputs
  get-next-version:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}

    permissions:
      contents: write

    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
          check-latest: true
          cache: npm

      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install @semantic-release-cargo/semantic-release-cargo

      - uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4

  # Setups up the rest of the jobs with tools
  setup:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: ${{ matrix.rust_os.rust }}
          override: true
          components: clippy, rustfmt

      - name: Build (to get dependencies)
        run: cargo build --verbose

      - name: Cache Rust toolchain
        uses: actions/cache/save@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ job.setup.steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

  # Checks to see if linting and formatting has been adhered to
  checks:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}
    needs:
      - setup

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Clippy
        if: ${{ matrix.rust_os.rust == '1.72.0' }}
        run: cargo clippy --all --all-features -- --deny warnings

      - name: Check fmt
        if: ${{ matrix.rust_os.rust == '1.72.0' }}
        run: cargo fmt --all -- --check

  # Tests the packages in the repo
  tests:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}
    needs:
      - setup

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Run tests
        run: cargo test --verbose

  # Compiles packages
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.rust_os.os }}
    needs:
      - setup
      - checks
      - tests

    strategy:
      fail-fast: false
      matrix:
        rust_os:
          - { rust: 1.72.0, os: ubuntu-20.04 }

    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"

    steps:
      - uses: actions/checkout@v3

      - name: Build
        run: cargo build --verbose

  # Dry run of semantic-release
  semantic-release-dry-run:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs:
      - get-next-version

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare semantic-release for Rust
        if: needs.get-next-version.outputs.new-release-published == 'true'
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
            extra_plugins: |
              @semantic-release-cargo/semantic-release-cargo
              @semantic-release/git
            dry_run: true
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_PUBLISH_KEY }}

  # --- Jobs that only on successful pushes to main ---
  semantic-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs:
      - get-next-version
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare semantic-release for Rust
        if: needs.get-next-version.outputs.new-release-published == 'true'
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
            extra_plugins: |
              @semantic-release-cargo/semantic-release-cargo
              @semantic-release/git
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_PUBLISH_KEY }}